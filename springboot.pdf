Spring Boot Notes

1. Overview:
   - Spring Boot is an open-source Java-based framework used to create stand-alone, production-grade Spring applications quickly and with minimal configuration.

2. Key Features:
   - Auto-configuration: Automatically configures Spring and third-party libraries based on project dependencies.
   - Standalone: Creates applications that can run independently without requiring an external web server.
   - Embedded Servers: Supports embedded Tomcat, Jetty, or Undertow servers.
   - Production Ready: Provides features like health checks, metrics, and externalized configuration.

3. Structure:
   - Uses convention over configuration to reduce boilerplate code.
   - Supports annotation-based configuration (e.g., @SpringBootApplication).

4. Getting Started:
   - Use Spring Initializr (https://start.spring.io/) to bootstrap a new project.
   - Main class annotated with @SpringBootApplication serves as the entry point.

5. Dependency Management:
   - Uses Maven or Gradle for dependency management.
   - Starters simplify dependency declarations (e.g., spring-boot-starter-web).

6. Common Use Cases:
   - RESTful web services
   - Microservices
   - Batch processing

7. Advantages:
   - Rapid development
   - Easy integration with Spring ecosystem
   - Minimal configuration required

8. Useful Commands:
   - mvn spring-boot:run or gradle bootRun to start the application

9. Monitoring & Management:
   - Spring Boot Actuator provides endpoints for monitoring and managing the application.

10. Documentation:
   - Official docs: https://docs.spring.io/spring-boot/docs/current/reference/html/